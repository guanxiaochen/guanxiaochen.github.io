[{"title":"Opencv安装-Java","date":"2019-11-19T10:05:48.000Z","path":"2019/11/19/Opencv安装-Java/","text":"Opencv for JavaMac可以使用HomeBrew安装 环境变量123// mac export JAVA_LIBRARY_PATH// linux export LD_LIBRARY_PATH// Windows export PATH 安装123456789101112131415161718192021222324252627282930313233## 下载opencvgit clone https://github.com/opencv/opencv.git## 安装jdk 配置环境变量## 安装cmakesudo apt-get install cmake## 安装antsudo apt-get install ant ## 编译cd opencvgit checkout 4.0.1mkdir buildcd build## 配置 如果不起作用，则在-D之后不使用空格。## java取消设置参数：BUILD_SHARED_LIBS## java取消BUILD_EXAMPLES，BUILD_TESTS，BUILD_PERF_TESTS，因为它们都将与OpenCV静态链接并且可以占用很多内存也很有用。## 原始命令: cmake -D BUILD_TESTS=OFF -D BUILD_SHARED_LIBS=OFF -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..cmake -D BUILD_TESTS=OFF -D BUILD_SHARED_LIBS=OFF -D CMAKE_INSTALL_PREFIX=/usr/local ..## 建立 #runs 7 jobs in parallelmake -j7## 安装库sudo make install## 设置环境变量// mac export JAVA_LIBRARY_PATH// linux export LD_LIBRARY_PATH// Windows export PATH","tags":[{"name":"环境","slug":"环境","permalink":"http://guanxiaochen.github.io/tags/环境/"}]},{"title":"中文关键字匹配 分词 高亮","date":"2019-11-14T16:00:00.000Z","path":"2019/11/15/中文关键字分词高亮/","text":"不存储文档的情况想,对关键字进行分词,与其他文档匹配高亮直接上代码: 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293/** * 中文匹配关键字 高亮工具 * @author guan * @date 2019/11/15 */@Slf4jpublic class IndexerUtil &#123; private static final IKAnalyzer ANALYZER = new IKAnalyzer(); private static final QueryParser QUERY_PARSER = new QueryParser(\"\", ANALYZER); private static final Formatter FORMATTER = new SimpleHTMLFormatter(\"&lt;em&gt;\", \"&lt;/em&gt;\"); /** * 高亮 */ public static Highlighter createHighlighter(String keyword) &#123; try &#123; Highlighter highlighter = new Highlighter(FORMATTER, new QueryScorer(QUERY_PARSER.parse(keyword))); highlighter.setTextFragmenter(new SimpleFragmenter(5000)); return highlighter; &#125; catch (ParseException e) &#123; LogUtils.error(log, \"获取高亮分词失败\", e); return null; &#125; &#125; /** * 高亮 */ public static List&lt;String&gt; highlighter(String keyword, List&lt;String&gt; texts) &#123; Highlighter highlighter = createHighlighter(keyword); if (highlighter == null) &#123; return texts; &#125; List&lt;String&gt; results = new ArrayList&lt;&gt;(texts.size()); for (String text : texts) &#123; results.add(highlighter(highlighter, text)); &#125; return results; &#125; /** * 高亮 */ public static String highlighter(Highlighter highlighter, String text) &#123; if (highlighter == null || StringUtils.isEmpty(text)) &#123; return text; &#125; try &#123; return highlighter.getBestFragment(QUERY_PARSER.getAnalyzer(), QUERY_PARSER.getField(), text); &#125; catch (Exception e) &#123; LogUtils.error(log, \"高亮文本失败\", e); return text; &#125; &#125; /** * 高亮 */ public static String highlighter(String keyword, String text) &#123; return highlighter(createHighlighter(keyword), text); &#125; /** * 分词 */ public static String analyzer(String keyword) &#123; return CollectionUtil.join(IndexerUtil.getToken(keyword), \" | \"); &#125; /** * 分词 */ public static List&lt;String&gt; getToken(String keyword) &#123; try (StringReader reader = new StringReader(keyword); TokenStream tokenStream = ANALYZER.tokenStream(\"\", reader))&#123; tokenStream.reset(); CharTermAttribute charTermAttribute = tokenStream.addAttribute(CharTermAttribute.class); List&lt;String&gt; result = new ArrayList&lt;&gt;(); while(tokenStream.incrementToken()) &#123; result.add(charTermAttribute.toString()); &#125; return result; &#125; catch (Exception e) &#123; throw new RecommendException(\"获取分词失败\", e); &#125; &#125; public static void main(String[] args) throws Exception &#123; String keyword = \"在开放市场和代理商业务的需求推动下，为实现流程上的快捷高效，内容质量上的大幅提升以及业务扩展的灵活性，我们进行了此次重构。\"; System.out.println(analyzer(keyword)); System.out.println(highlighter(keyword,keyword)); &#125;&#125;","tags":[{"name":"lucene elasticsearch","slug":"lucene-elasticsearch","permalink":"http://guanxiaochen.github.io/tags/lucene-elasticsearch/"}]},{"title":"Sharding-JDBC接入","date":"2018-03-15T08:48:48.000Z","path":"2018/03/15/Sharding-JDBC接入/","text":"接入效果 每个学校的数据都会在一个分片内,存取都只用单库操作(数据业务隔离,如果业务场景不符合,请考虑其他方案) 因为肯定是单库操作,无跨库操作,sql不需要解析重写,所以使用强制路由 每个查询都需要指明学校Id,全局表例外 可以用非学校Id,比如班级Id, 区域Id等,只要通过ShardRoutingStrategy能获取一个唯一分片 方案 使用Sharding-JDBC, 集成与Spring+mybatis 通过Spring切面与注解, 可以实现获取到每一个请求对应的分片,压入ThreadLocal内,切面结束弹出分片信息 通过Spring切面与注解, 可以实现获取到每一个请求是否需要走从库还是主库 DBManagerHolder保存一个分片栈,支持一次请求多次分片切换 使用mybatis拦截器,最终在实际mybatis执行查询时,获取本次sql对应分片DataSource,使用hint方式,执行查询 使用方式12345678910111213141516171819202122232425262728293031323334353637383940414243@Datapublic class TestQuery &#123; /** 学校id */ @Sharding(ShardingType.ID) private Long schoolId;&#125;@Componentpublic class TestProvider &#123; /** * 第一种: 使用对象,对象内有属性指明分片路由 * 查询query内注解属性schoolId对应规则分片下的所有用户 */ public List&lt;User&gt; fetchUserList(TestQuery query) &#123; return dao.list(...); &#125; /** * 第二种: 使用ShardingType.ID 注解,指明通过schoolId计算分片路由 * 查询schoolId对应规则分片下的所有用户 */ public List&lt;User&gt; fetchUserList(@Sharding(ShardingType.ID) Long schoolId) &#123; return dao.list(...); &#125; /** * 第三种: 使用ShardingType.GLOBAL 注解,走全局路由 * 查询所有分片下, 用户id等于userId的记录 */ public List&lt;User&gt; fetchUserList(@Sharding(ShardingType.GLOBAL) Long userId) &#123; return dao.list(...); &#125; /** * 第三种: 使用ShardingType.SHARD 注解, 强制走参数指定分片 * 查询当前分片内的所有用户 */ public List&lt;User&gt; fetchUserList(@Sharding(ShardingType.SHARD) String dbShardKey) &#123; return dao.list(...); &#125;&#125; maven12345678910&lt;dependency&gt; &lt;groupId&gt;io.shardingsphere&lt;/groupId&gt; &lt;artifactId&gt;sharding-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;sharding-jdbc.version&#125;&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.shardingsphere&lt;/groupId&gt; &lt;artifactId&gt;sharding-jdbc-transaction&lt;/artifactId&gt; &lt;version&gt;$&#123;sharding-jdbc.version&#125;&lt;/version&gt;&lt;/dependency&gt; 拦截器123456789&lt;!-- 主从数据库注解切换--&gt;&lt;bean id=\"masterSlaveInterceptor\" class=\"com.test.sharding.DBMasterSlaveInterceptor\"/&gt;&lt;!-- 分片 --&gt;&lt;bean id=\"shardingInterceptor\" class=\"com.test.sharding.DBShardingInterceptor\"/&gt;&lt;aop:config proxy-target-class=\"true\"&gt; &lt;aop:advisor advice-ref=\"masterSlaveInterceptor\" pointcut=\"execution(* com.test..*(..)) and @annotation(com.test.sharding.MasterSlave)\" /&gt; &lt;aop:advisor advice-ref=\"shardingInterceptor\" pointcut=\"execution(* com.test.provider..*(..))\" /&gt;&lt;/aop:config&gt; 实现ShardingType12345678910/** * 分片字段类型 */public enum ShardingType &#123; FIELD, ID, SHARD, GLOBAL ;&#125; Sharding12345678/** * 分片注解 */@Target(value = &#123;ElementType.PARAMETER, ElementType.FIELD&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface Sharding &#123; ShardingType value();&#125; ShardingIngor12345678/** * 数据库忽略分片,走默认全局库 */@Target(value = &#123;ElementType.METHOD, ElementType.TYPE&#125;)@Retention(RetentionPolicy.RUNTIME)public @interface ShardingIngor &#123; &#125; ShardRoutingStrategy12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 分片路由服务 */@Servicepublic class ShardRoutingStrategy &#123; @Resource private DBConfig dbConfig; /** * 获取分片字段 * @param shardingType * @param param * @return */ public String getKey(ShardingType shardingType, Object param) &#123; switch (shardingType) &#123; case FIELD: for (Field field : param.getClass().getDeclaredFields()) &#123; Sharding sharding = field.getAnnotation(Sharding.class); if(sharding !=null) &#123; try &#123; field.setAccessible(true); Object fieldParam = field.get(param); if(fieldParam !=null) &#123; return getKey(sharding.value(), fieldParam); &#125; &#125; catch (IllegalAccessException e) &#123; LogUtils.error(LOG, \"获取分片字段\", e, \"name\", field.getName()); &#125; &#125; &#125; return null; case ID: // 自定义,这里简单模拟 String[] dbs = dbConfig.getDbs(); Long id = (Long) param; return dbs[(int)(id%dbs.length)]; case SHARD: return (String)param; case GLOBAL: return dbConfig.getGlobalDB(); default: throw new ShardException(\"分片类型不正确\"); &#125; &#125;&#125; DBManagerHolder123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101/** * 数据源管理工具(不保存DataSource,只保存分片key) */public class DBManagerHolder &#123; private static final ThreadLocal&lt;Stack&lt;DBContext&gt;&gt; CONTEXT_HOLDER = new ThreadLocal&lt;&gt;(); public static DBContext getContext() &#123; Stack&lt;DBContext&gt; contexts = CONTEXT_HOLDER.get(); return contexts==null?null:contexts.peek(); &#125; public static void setDB(String db) &#123; Stack&lt;DBContext&gt; contexts = CONTEXT_HOLDER.get(); if(contexts==null) &#123; contexts = new Stack&lt;&gt;(); CONTEXT_HOLDER.set(contexts); &#125; //继承上一层主从配置 boolean isMaster = contexts.size() &gt; 0 &amp;&amp; contexts.peek().isMaster(); contexts.push(new DBContext(db, isMaster)); &#125; public static boolean setMaster(boolean master) &#123; Stack&lt;DBContext&gt; contexts = CONTEXT_HOLDER.get(); if(contexts==null) &#123; contexts = new Stack&lt;&gt;(); CONTEXT_HOLDER.set(contexts); contexts.push(new DBContext(master)); return false; &#125; else &#123; DBContext peek = contexts.peek(); boolean isMaster = peek.isMaster(); // 如果正在操作主库,则不改变 if(!isMaster) &#123; peek.setMaster(master); &#125; return isMaster; &#125; &#125; public static void resetMaster(boolean master) &#123; Stack&lt;DBContext&gt; contexts = CONTEXT_HOLDER.get(); if(contexts!=null &amp;&amp; contexts.size()&gt;0) &#123; DBContext peek = contexts.peek(); if (contexts.size()==1 &amp;&amp; peek.getDb()==null) &#123; CONTEXT_HOLDER.remove(); &#125; else &#123; peek.setMaster(master); &#125; &#125; &#125; public static void resetDB() &#123; Stack&lt;DBContext&gt; contexts = CONTEXT_HOLDER.get(); if(contexts !=null) &#123; if(contexts.size()&gt;1) &#123; contexts.pop(); &#125; else &#123; CONTEXT_HOLDER.remove(); &#125; &#125; &#125; /** * 当前数据源 */ public static class DBContext &#123; /** * 数据源 */ private String db; /** * 是否操作主库 */ private boolean master; public String getDb() &#123; return db; &#125; public boolean isMaster() &#123; return master; &#125; void setMaster(boolean master) &#123; this.master = master; &#125; DBContext(String db, boolean master) &#123; this.db = db; this.master = false; &#125; DBContext(boolean master) &#123; this.master = master; &#125; &#125;&#125; MasterSlave123456789101112/** * 数据库主从切换注解 */@Target(ElementType.METHOD)@Retention(RetentionPolicy.RUNTIME)public @interface MasterSlave &#123; /** * 是否强制主库 * @return */ boolean value() default true;&#125; MyHintShardingAlgorithm12345678910111213141516171819/** * 强制路由规则hint */public class MyHintShardingAlgorithm implements HintShardingAlgorithm &#123; @Override public Collection&lt;String&gt; doSharding(Collection&lt;String&gt; availableTargetNames, ShardingValue shardingValue) &#123; if(shardingValue instanceof ListShardingValue) &#123; ListShardingValue listShardingValue = (ListShardingValue) shardingValue; if(HintManagerHolder.DB_TABLE_NAME.equals(shardingValue.getLogicTableName()) &amp;&amp; HintManagerHolder.DB_COLUMN_NAME.equals(shardingValue.getColumnName())) &#123; List&lt;String&gt; result = new ArrayList&lt;&gt;(); for (Object value : listShardingValue.getValues()) &#123; result.add(value.toString()); &#125; return result; &#125; &#125; throw new ShardException(\"未知数据库分片\"); &#125;&#125; DBMasterSlaveInterceptor123456789101112131415/** * 主从数据库切换 */public class DBMasterSlaveInterceptor implements MethodInterceptor &#123; @Override public Object invoke(MethodInvocation invocation) throws Throwable &#123; boolean isMaster = DBManagerHolder.setMaster(invocation.getMethod().getAnnotation(MasterSlave.class).value()); try &#123; return invocation.proceed(); &#125; finally &#123; DBManagerHolder.resetMaster(isMaster); &#125; &#125;&#125; DBShardingInterceptor1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * 数据库分库支持 */public class DBShardingInterceptor implements MethodInterceptor &#123; @Resource private ShardRoutingStrategy routingStrategy; @Resource private DBConfig dbConfig; @Override public Object invoke(MethodInvocation invocation) throws Throwable &#123; Method method = invocation.getMethod(); if (method.isAnnotationPresent(ShardingIngor.class) || method.getDeclaringClass().isAnnotationPresent(ShardingIngor.class)) &#123; DBManagerHolder.setDB(dbConfig.getGlobalDB()); &#125; else &#123; String shardKey = getKey(invocation); if(shardKey==null) &#123; return ShardUtil.getEmptyResult(method.getReturnType()); &#125; DBManagerHolder.setDB(shardKey); &#125; try &#123; return invocation.proceed(); &#125; finally &#123; DBManagerHolder.resetDB(); &#125; &#125; /** * 获取分片字段 * @param invocation * @return */ private String getKey(MethodInvocation invocation) &#123; Annotation[][] parameterAnnotations = invocation.getMethod().getParameterAnnotations(); for (int i = 0; i &lt; parameterAnnotations.length; i++) &#123; Annotation[] annotations = parameterAnnotations[i]; for (Annotation annotation : annotations) &#123; if (annotation instanceof Sharding &amp;&amp; invocation.getArguments()[i] !=null) &#123; return routingStrategy.getKey(((Sharding) annotation).value(), invocation.getArguments()[i]); &#125; &#125; &#125; if(invocation.getArguments().length==1) &#123; Object param = invocation.getArguments()[0]; if (!(param instanceof Number || param instanceof String)) &#123; return routingStrategy.getKey(ShardingType.FIELD, param); &#125; &#125; throw new ShardException(\"获取数据分片异常\"); &#125;&#125; MybatisShardingInterceptor1234567891011121314151617181920212223242526272829303132333435363738394041/** * 数据分库 */@Intercepts(&#123; @Signature(type = Executor.class, method = \"update\", args = &#123;MappedStatement.class, Object.class&#125;), @Signature(type = Executor.class, method = \"query\", args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class&#125;), @Signature(type = Executor.class, method = \"query\", args = &#123;MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class&#125;)&#125;)public class MybatisShardingInterceptor implements Interceptor &#123; @Override public Object intercept(Invocation invocation) throws Throwable &#123; boolean isNew; if(isNew = !HintManagerHolder.isUseShardingHint()) &#123; DBManagerHolder.DBContext context = DBManagerHolder.getContext(); SystemRuntimeValidator.isEmpty(context, \"未找到数据库分片配置\"); HintManager instance = HintManager.getInstance(); instance.setDatabaseShardingValue(context.getDb()); //有事务直接走主库 if(TransactionSynchronizationManager.isSynchronizationActive() || context.isMaster()) &#123; instance.setMasterRouteOnly(); &#125; &#125; try &#123; return invocation.proceed(); &#125; finally &#123; if(isNew) &#123; HintManagerHolder.clear(); &#125; &#125; &#125; @Override public Object plugin(Object target) &#123; return Plugin.wrap(target, this); &#125; @Override public void setProperties(Properties properties) &#123; &#125;&#125;","tags":[{"name":"Sharding","slug":"Sharding","permalink":"http://guanxiaochen.github.io/tags/Sharding/"}]},{"title":"IntelliJ IDEA For Mac 快捷键","date":"2018-01-06T10:05:48.000Z","path":"2018/01/06/IntelliJ-IDEA-For-Mac-快捷键/","text":"IntelliJ IDEA快捷键说明 建议将Mac系统中与IntelliJ IDEA冲突的快捷键取消或更改，不建议改IntelliJ IDEA的默认快捷键。 Mac键盘符号和修饰键说明 ⌘ Command ⇧ Shift ⌥ Option ⌃ Control ↩︎ Return/Enter ⌫ Delete ⌦ 向前删除键（Fn+Delete） ↑ 上箭头 ↓ 下箭头 ← 左箭头 → 右箭头 ⇞ Page Up（Fn+↑） ⇟ Page Down（Fn+↓） Home Fn + ← End Fn + → ⇥ 右制表符（Tab键） ⇤ 左制表符（Shift+Tab） ⎋ Escape (Esc) 一、Editing（编辑） ⌃Space 基本的代码补全（补全任何类、方法、变量） ⌃⇧Space 智能代码补全（过滤器方法列表和变量的预期类型） ⌘⇧↩ 自动结束代码，行末自动添加分号 ⌘P 显示方法的参数信息 ⌃J, Mid. button click 快速查看文档 ⇧F1 查看外部文档（在某些代码上会触发打开浏览器显示相关文档） ⌘+鼠标放在代码上 显示代码简要信息 ⌘F1 在错误或警告处显示具体描述信息 ⌘N, ⌃↩, ⌃N 生成代码（getter、setter、构造函数、hashCode/equals,toString） ⌃O 覆盖方法（重写父类方法） ⌃I 实现方法（实现接口中的方法） ⌘⌥T 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码） ⌘/ 注释/取消注释与行注释 ⌘⌥/ 注释/取消注释与块注释 ⌥↑ 连续选中代码块 ⌥↓ 减少当前选中的代码块 ⌃⇧Q 显示上下文信息 ⌥↩ 显示意向动作和快速修复代码 ⌘⌥L 格式化代码 ⌃⌥O 优化import ⌃⌥I 自动缩进线 ⇥ / ⇧⇥ 缩进代码 / 反缩进代码 ⌘X 剪切当前行或选定的块到剪贴板 ⌘C 复制当前行或选定的块到剪贴板 ⌘V 从剪贴板粘贴 ⌘⇧V 从最近的缓冲区粘贴 ⌘D 复制当前行或选定的块 ⌘⌫ 删除当前行或选定的块的行 ⌃⇧J 智能的将代码拼接成一行 ⌘↩ 智能的拆分拼接的行 ⇧↩ 开始新的一行 ⌘⇧U 大小写切换 ⌘⇧] / ⌘⇧[ 选择直到代码块结束/开始 ⌥⌦ 删除到单词的末尾（⌦键为Fn+Delete） ⌥⌫ 删除到单词的开头 ⌘+ / ⌘- 展开 / 折叠代码块 ⌘⇧+ 展开所以代码块 ⌘⇧- 折叠所有代码块 ⌘W 关闭活动的编辑器选项卡 二、Search/Replace（查询/替换） Double ⇧ 查询任何东西 ⌘F 文件内查找 ⌘G 查找模式下，向下查找 ⌘⇧G 查找模式下，向上查找 ⌘R 文件内替换 ⌘⇧F 全局查找（根据路径） ⌘⇧R 全局替换（根据路径） ⌘⇧S 查询结构（Ultimate Edition 版专用，需要在Keymap中设置） ⌘⇧M 替换结构（Ultimate Edition 版专用，需要在Keymap中设置） 三、Usage Search（使用查询） ⌥F7 / ⌘F7 在文件中查找用法 / 在类中查找用法 ⌘⇧F7 在文件中突出显示的用法 ⌘⌥F7 显示用法 四、Compile and Run（编译和运行） ⌘F9 编译Project ⌘⇧F9 编译选择的文件、包或模块 ⌃⌥R 弹出 Run 的可选择菜单 ⌃⌥D 弹出 Debug 的可选择菜单 ⌃R 运行 ⌃D 调试 ⌃⇧R, ⌃⇧D 从编辑器运行上下文环境配置 五、Debugging（调试） F8 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内 F7 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中 ⇧F7 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法 ⇧F8 跳出 ⌥F9 运行到光标处，如果光标前有其他断点会进入到该断点 ⌥F8 计算表达式（可以更改变量值使其生效） ⌘⌥R 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上 ⌘F8 切换断点（若光标当前行有断点则取消断点，没有则加上断点） ⌘⇧F8 查看断点信息 六、Navigation（导航） ⌘O 查找类文件 ⌘⇧O 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/ ⌘⌥O 前往指定的变量 / 方法 ⌃← / ⌃→ 左右切换打开的编辑tab页 F12 返回到前一个工具窗口 ⎋ 从工具窗口进入代码文件窗口 ⇧⎋ 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口 ⌘⇧F4 关闭活动run/messages/find/… tab ⌘L 在当前文件跳转到某一行的指定处 ⌘E 显示最近打开的文件记录列表 ⌘⌥← / ⌘⌥→ 退回 / 前进到上一个操作的地方 ⌘⇧⌫ 跳转到最后一个编辑的地方 ⌥F1 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder) ⌘B / ⌘ 鼠标点击 进入光标所在的方法/变量的接口或是定义处 ⌘⌥B 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口 ⌥ Space, ⌘Y 快速打开光标所在方法、类的定义 ⌃⇧B 跳转到类型声明处 ⌘U 前往当前光标所在方法的父类的方法 / 接口定义 ⌃↓ / ⌃↑ 当前光标跳转到当前文件的前一个/后一个方法名位置 ⌘] / ⌘[ 移动光标到当前所在代码的花括号开始/结束位置 ⌘F12 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法） ⌃H 显示当前类的层次结构 ⌘⇧H 显示方法层次结构 ⌃⌥H 显示调用层次结构 F2 / ⇧F2 跳转到下一个/上一个突出错误或警告的位置 F4 / ⌘↓ 编辑/查看代码源 ⌥ Home 显示到当前文件的导航条 F3选中文件/文件夹/代码行，添加/取消书签 ⌥F3 选中文件/文件夹/代码行，使用助记符添加/取消书签 ⌃0...⌃9 定位到对应数值的书签位置 ⌘F3 显示所有书签 七、Refactoring（重构） F5 复制文件到指定目录 F6 移动文件到指定目录 ⌘⌫ 在文件上为安全删除文件，弹出确认框 ⇧F6 重命名文件 ⌘F6 更改签名 ⌘⌥N 一致性 ⌘⌥M 将选中的代码提取为方法 ⌘⌥V 提取变量 ⌘⌥F 提取字段 ⌘⌥C 提取常量 ⌘⌥P 提取参数 八、VCS/Local History（版本控制/本地历史记录） ⌘K 提交代码到版本控制器 ⌘T 从版本控制器更新代码 ⌥⇧C 查看最近的变更记录 ⌃C 快速弹出版本控制器操作面板 九、Live Templates（动态代码模板） ⌘⌥J 弹出模板选择窗口，将选定的代码使用动态模板包住 ⌘J 插入自定义动态代码模板 十、General（通用） ⌘1...⌘9 打开相应编号的工具窗口 ⌘S 保存所有 ⌘⌥Y 同步、刷新 ⌃⌘F 切换全屏模式 ⌘⇧F12 切换最大化编辑器 ⌥⇧F 添加到收藏夹 ⌥⇧I 检查当前文件与当前的配置文件 §⌃, ⌃` 快速切换当前的scheme（切换主题、代码样式等） ⌘, 打开IDEA系统设置 ⌘; 打开项目结构对话框 ⇧⌘A 查找动作（可设置相关选项） ⌃⇥ 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口） 十一、Other（一些官方文档上没有体现的快捷键） ⌘⇧8 竖编辑模式","tags":[{"name":"快捷键","slug":"快捷键","permalink":"http://guanxiaochen.github.io/tags/快捷键/"}]},{"title":"Hexo+GitHub-使用说明","date":"2017-05-06T10:05:48.000Z","path":"2017/05/06/Hexo+GitHub-使用说明/","text":"Hexo GitHub 简单使用说明 简单步骤 github创建项目 同名.github.io github添加 ssh hexo安装：npm install -g hexo-cli hexo 安装 安装 nodejs 安装 git npm install -g hexo-cli hexo 命令1234567hexo init # 初始化npm install # 安装组件hexo clean # 清除缓存hexo g # 生成页面hexo s # 启动预览hexo d # 发布","tags":[{"name":"快捷键","slug":"快捷键","permalink":"http://guanxiaochen.github.io/tags/快捷键/"}]}]